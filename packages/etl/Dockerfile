# Build stage
FROM rust:1.81 as builder

WORKDIR /app

# Copy build.rs and Cargo files
COPY Cargo.toml build.rs ./

# Copy migration files
COPY migrations ./migrations/

# Create a dummy main.rs to build dependencies
RUN mkdir -p src/db/generated && \
    echo "// This file is generated by build.rs" > src/db/generated/mod.rs && \
    mkdir -p src/db && \
    echo "pub mod generated;\n\npub fn init() {}\n" > src/db/mod.rs && \
    echo "fn main() { println!(\"Hello, world!\"); }" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Copy the actual source code
COPY src ./src

# Force cargo to rebuild with the actual source code
RUN touch src/main.rs && cargo build --release

# Runtime stage
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libssl-dev \
    ca-certificates \
    postgresql-client && \
    rm -rf /var/lib/apt/lists/*

# Copy the binary from the builder stage
COPY --from=builder /app/target/release/rise-etl .

# Copy migrations for schema initialization
COPY migrations ./migrations/

# Create an empty .env file (environment variables will be provided by the container)
RUN touch /app/.env

# Add all environment files as examples
COPY .env.example ./

# Add a healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD ps aux | grep rise-etl | grep -v grep > /dev/null || exit 1

# Ensure we have execute permissions on the binary
RUN chmod +x /app/rise-etl

# Create an empty .env file to prevent file not found errors
RUN echo "# Default environment file" > /app/.env

# Add build timestamp as a label to force rebuilds
ARG BUILD_TIMESTAMP

# Set the entrypoint directly to the binary
ENTRYPOINT ["/app/rise-etl", "migrate"]