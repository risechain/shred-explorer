# Build stage
FROM rust:1.81 as builder

WORKDIR /app

# Copy build.rs and Cargo files
COPY Cargo.toml build.rs ./

# Copy migration files
COPY migrations ./migrations/

# Create a dummy main.rs to build dependencies
RUN mkdir -p src/db/generated && \
    echo "// This file is generated by build.rs" > src/db/generated/mod.rs && \
    mkdir -p src/db && \
    echo "pub mod generated;\n\npub fn init() {}\n" > src/db/mod.rs && \
    echo "fn main() { println!(\"Hello, world!\"); }" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Copy the actual source code
COPY src ./src

# Force cargo to rebuild with the actual source code
RUN touch src/main.rs && cargo build --release

# Runtime stage
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libssl-dev \
    ca-certificates \
    postgresql-client && \
    rm -rf /var/lib/apt/lists/*

# Copy the binary from the builder stage
COPY --from=builder /app/target/release/rise-etl .

# Copy migrations for schema initialization
COPY migrations ./migrations/

# Copy .env.example to config directory
COPY .env.example ./

# Add a healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD ps aux | grep rise-etl | grep -v grep > /dev/null || exit 1

# Create startup script
RUN echo '#!/bin/sh\n\
# Wait for PostgreSQL to be ready\n\
export PGPASSWORD="${DATABASE_PASSWORD:-password}"\n\
until pg_isready -h ${DATABASE_HOST:-postgres} -p ${DATABASE_PORT:-5432} -U ${DATABASE_USER:-username}; do\n\
  echo "Waiting for PostgreSQL to be ready..."\n\
  sleep 2\n\
done\n\
\n\
# Apply database migrations\n\
for migration in ./migrations/*.sql; do\n\
  echo "Applying migration: $migration"\n\
  psql -h ${DATABASE_HOST:-postgres} -p ${DATABASE_PORT:-5432} -U ${DATABASE_USER:-username} -d ${DATABASE_NAME:-shred_explorer} -f "$migration"\n\
done\n\
\n\
# Start the ETL service\n\
exec /app/rise-etl\n\
' > /app/start.sh && chmod +x /app/start.sh

# Set the entrypoint
ENTRYPOINT ["/app/start.sh"]